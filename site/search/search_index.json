{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Current Developers AstroCode Matasmathew Seakat MC. Kitten Face Tomgie WohoNavy Zeloi Information Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at sodales felis. Praesent euismod dui eget fringilla semper. Nullam efficitur arcu lacus, ornare egestas dui iaculis eu. Praesent posuere lorem eu purus pellentesque pharetra. Integer egestas libero eget sagittis vestibulum. Aenean rhoncus eros at auctor ullamcorper. Phasellus quis nulla lacinia, congue odio id, porta ex. Duis eu cursus diam, gravida malesuada magna. Mauris elementum, nisi nec viverra facilisis, ex eros tempus ante, non laoreet quam urna varius risus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Praesent erat dui, viverra sed felis sed, sodales egestas augue. Nam laoreet ligula eu libero placerat condimentum. Phasellus at dolor aliquam, ornare mi eu, aliquam ligula.","title":"Home"},{"location":"#current-developers","text":"AstroCode Matasmathew Seakat MC. Kitten Face Tomgie WohoNavy Zeloi","title":"Current Developers"},{"location":"#information","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at sodales felis. Praesent euismod dui eget fringilla semper. Nullam efficitur arcu lacus, ornare egestas dui iaculis eu. Praesent posuere lorem eu purus pellentesque pharetra. Integer egestas libero eget sagittis vestibulum. Aenean rhoncus eros at auctor ullamcorper. Phasellus quis nulla lacinia, congue odio id, porta ex. Duis eu cursus diam, gravida malesuada magna. Mauris elementum, nisi nec viverra facilisis, ex eros tempus ante, non laoreet quam urna varius risus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Praesent erat dui, viverra sed felis sed, sodales egestas augue. Nam laoreet ligula eu libero placerat condimentum. Phasellus at dolor aliquam, ornare mi eu, aliquam ligula.","title":"Information"},{"location":"BubbleComponent/","text":"BubbleComponent Documentation Not Found","title":"BubbleComponent"},{"location":"BubbleComponent/#bubblecomponent","text":"Documentation Not Found","title":"BubbleComponent"},{"location":"BuildConstraintsRig/","text":"BuildConstraintsRig This module builds the ragdoll. It returns a dictionary of joints and a dictionary of NoCollisionConstraints. The joint dictionary is structured like this: { Head = { Attachment0 = [Attachment object], Attachment1 = [Attachment object], Constraint = [BallSocketConstraint object], Motor = [Motor6D object], Offset = [CFrame of Attachment0 offset from Motor.C0] }, LeftArm = {...}, RightArm = {...}, LeftLeg = {...}, RightLeg = {...}, } The NoCollisionConstraints dictionary is structured like this: { Arms = { [NoCollisionConstraint], [NoCollisionConstraint], ... }, Legs = {...}, Hips = {...} } Each index in the NoCollisionConstraints dictionary has the minimum amount of NoCollisionConstraint objects required to connect all of the parts in each index of Constants.ANIMATE_COLLISION_FILTERS to every other part in the index.","title":"BuildConstraintsRig"},{"location":"BuildConstraintsRig/#buildconstraintsrig","text":"This module builds the ragdoll. It returns a dictionary of joints and a dictionary of NoCollisionConstraints. The joint dictionary is structured like this: { Head = { Attachment0 = [Attachment object], Attachment1 = [Attachment object], Constraint = [BallSocketConstraint object], Motor = [Motor6D object], Offset = [CFrame of Attachment0 offset from Motor.C0] }, LeftArm = {...}, RightArm = {...}, LeftLeg = {...}, RightLeg = {...}, } The NoCollisionConstraints dictionary is structured like this: { Arms = { [NoCollisionConstraint], [NoCollisionConstraint], ... }, Legs = {...}, Hips = {...} } Each index in the NoCollisionConstraints dictionary has the minimum amount of NoCollisionConstraint objects required to connect all of the parts in each index of Constants.ANIMATE_COLLISION_FILTERS to every other part in the index.","title":"BuildConstraintsRig"},{"location":"ClientCast/","text":"ClientCast DataStore2: A wrapper for data stores that caches, saves player's data, and uses berezaa's method of saving data. Use require(1936396537) to have an updated version of DataStore2. DataStore2(dataStoreName, player) - Returns a DataStore2 DataStore DataStore2 DataStore: - Get([defaultValue]) - Set(value) - Update(updateFunc) - Increment(value, defaultValue) - BeforeInitialGet(modifier) - BeforeSave(modifier) - Save() - SaveAsync() - OnUpdate(callback) - BindToClose(callback) local coinStore = DataStore2(\"Coins\", player) To give a player coins: coinStore:Increment(50) To get the current player's coins: coinStore:Get()","title":"ClientCast"},{"location":"ClientCast/#clientcast","text":"DataStore2: A wrapper for data stores that caches, saves player's data, and uses berezaa's method of saving data. Use require(1936396537) to have an updated version of DataStore2. DataStore2(dataStoreName, player) - Returns a DataStore2 DataStore DataStore2 DataStore: - Get([defaultValue]) - Set(value) - Update(updateFunc) - Increment(value, defaultValue) - BeforeInitialGet(modifier) - BeforeSave(modifier) - Save() - SaveAsync() - OnUpdate(callback) - BindToClose(callback) local coinStore = DataStore2(\"Coins\", player) To give a player coins: coinStore:Increment(50) To get the current player's coins: coinStore:Get()","title":"ClientCast"},{"location":"DataStore2/","text":"DataStore2 Documentation Not Found","title":"DataStore2"},{"location":"DataStore2/#datastore2","text":"Documentation Not Found","title":"DataStore2"},{"location":"HillComponent/","text":"HillComponent HillComponent Replaces the forcefield hills with a rotating beam circle. The math: https://www.desmos.com/calculator/xrpslugw6x","title":"HillComponent"},{"location":"HillComponent/#hillcomponent","text":"HillComponent Replaces the forcefield hills with a rotating beam circle. The math: https://www.desmos.com/calculator/xrpslugw6x","title":"HillComponent"},{"location":"KillBrickComponent/","text":"LobbyCountdown Documentation Not Found","title":"KillBrickComponent"},{"location":"KillBrickComponent/#lobbycountdown","text":"Documentation Not Found","title":"LobbyCountdown"},{"location":"LeaderboardComponent/","text":"LeaderboardComponent Documentation Not Found","title":"LeaderboardComponent"},{"location":"LeaderboardComponent/#leaderboardcomponent","text":"Documentation Not Found","title":"LeaderboardComponent"},{"location":"LobbyCountdown/","text":"KillBrickComponent Documentation Not Found","title":"LobbyCountdown"},{"location":"LobbyCountdown/#killbrickcomponent","text":"Documentation Not Found","title":"KillBrickComponent"},{"location":"ProfileService/","text":"ProfileService {Madwork} -ProfileService--------------------------------------- (STANDALONE VERSION) DataStore profiles - universal session-locked savable table API Official documentation: https://madstudioroblox.github.io/ProfileService/ DevForum discussion: https://devforum.roblox.com/t/ProfileService/667805 WARNINGS FOR \"Profile.Data\" VALUES: ! Do not create numeric tables with gaps - attempting to replicate such tables will result in an error; ! Do not create mixed tables (some values indexed by number and others by string key), as only the data indexed by number will be replicated. ! Do not index tables by anything other than numbers and strings. ! Do not reference Roblox Instances ! Do not reference userdata (Vector3, Color3, CFrame...) - Serialize userdata before referencing ! Do not reference functions WARNING: Calling ProfileStore:LoadProfileAsync() with a \"profile_key\" which wasn't released in the SAME SESSION will result in an error! If you want to \"ProfileStore:LoadProfileAsync()\" instead of using the already loaded profile, :Release() the old Profile object. Members: ProfileService.ServiceLocked [bool] ProfileService.IssueSignal [ScriptSignal](error_message, profile_store_name, profile_key) ProfileService.CorruptionSignal [ScriptSignal](profile_store_name, profile_key) ProfileService.CriticalStateSignal [ScriptSignal](is_critical_state) Functions: ProfileService.GetProfileStore(profile_store_name, profile_template) --> [ProfileStore] -- WARNING: Only one ProfileStore can exist for a given profile_store_name in a game session! * Parameter description for \"ProfileService.GetProfileStore()\": profile_store_name [string] -- DataStore name profile_template []: {} [table] -- Profiles will default to given table (hard-copy) when no data was saved previously Members [ProfileStore]: ProfileStore.Mock [ProfileStore] -- Reflection of ProfileStore methods, but the methods will use a mock DataStore Methods [ProfileStore]: ProfileStore:LoadProfileAsync(profile_key, not_released_handler) --> [Profile / nil] not_released_handler(place_id, game_job_id) ProfileStore:GlobalUpdateProfileAsync(profile_key, update_handler) --> [GlobalUpdates / nil] (update_handler(GlobalUpdates)) -- Returns GlobalUpdates object if update was successful, otherwise returns nil ProfileStore:ViewProfileAsync(profile_key) --> [Profile / nil] -- Notice #1: Profile object methods will not be available; Notice #2: Profile object members will be nil (Profile.Data = nil, Profile.MetaData = nil) if the profile hasn't been created, with the exception of Profile.GlobalUpdates which could be empty or populated by ProfileStore:GlobalUpdateProfileAsync() ProfileStore:WipeProfileAsync(profile_key) --> is_wipe_successful [bool] -- Completely wipes out profile data from the DataStore / mock DataStore with no way to recover it. * Parameter description for \"ProfileStore:LoadProfileAsync()\": profile_key [string] -- DataStore key not_released_handler = \"ForceLoad\" -- Force loads profile on first call OR not_released_handler = \"Steal\" -- Steals the profile ignoring it's session lock OR not_released_handler [function] (place_id, game_job_id) --> [string] (\"Repeat\" / \"Cancel\" / \"ForceLoad\") -- \"not_released_handler\" will be triggered in cases where the profile is not released by a session. This function may yield for as long as desirable and must return one of three string values: [\"Repeat\"] - ProfileService will repeat the profile loading proccess and may trigger the release handler again [\"Cancel\"] - ProfileStore:LoadProfileAsync() will immediately return nil [\"ForceLoad\"] - ProfileService will repeat the profile loading call, but will return Profile object afterwards and release the profile for another session that has loaded the profile [\"Steal\"] - The profile will usually be loaded immediately, ignoring an existing remote session lock and applying a session lock for this session. * Parameter description for \"ProfileStore:GlobalUpdateProfileAsync()\": profile_key [string] -- DataStore key update_handler [function] (GlobalUpdates) -- This function gains access to GlobalUpdates object methods (update_handler can't yield) Members [Profile]: Profile.Data [table] -- Writable table that gets saved automatically and once the profile is released Profile.MetaData [table] (Read-only) -- Information about this profile Profile.MetaData.ProfileCreateTime [number] (Read-only) -- os.time() timestamp of profile creation Profile.MetaData.SessionLoadCount [number] (Read-only) -- Amount of times the profile was loaded Profile.MetaData.ActiveSession [table] (Read-only) {place_id, game_job_id} / nil -- Set to a session link if a game session is currently having this profile loaded; nil if released Profile.MetaData.MetaTags [table] {[\"tag_name\"] = tag_value, ...} -- Saved and auto-saved just like Profile.Data Profile.MetaData.MetaTagsLatest [table] (Read-only) -- Latest version of MetaData.MetaTags that was definetly saved to DataStore (You can use Profile.MetaData.MetaTagsLatest for product purchase save confirmation, but create a system to clear old tags after they pile up) Profile.GlobalUpdates [GlobalUpdates] Methods [Profile]: -- SAFE METHODS - Will not error after profile expires: Profile:IsActive() --> [bool] -- Returns true while the profile is active and can be written to Profile:GetMetaTag(tag_name) --> value Profile:Reconcile() -- Fills in missing (nil) [string_key] = [value] pairs to the Profile.Data structure Profile:ListenToRelease(listener) --> [ScriptConnection] (place_id / nil, game_job_id / nil) -- WARNING: Profiles can be released externally if another session force-loads this profile - use :ListenToRelease() to handle player leaving cleanup. Profile:Release() -- Call after the session has finished working with this profile e.g., after the player leaves (Profile object will become expired) (Does not yield) Profile:ListenToHopReady(listener) --> [ScriptConnection] () -- Passed listener will be executed after the releasing UpdateAsync call finishes; -- Wrap universe teleport requests with this method AFTER releasing the profile to improve session lock sharing between universe places; -- :ListenToHopReady() will usually call the listener in around a second, but may ocassionally take up to 7 seconds when a release happens -- next to an auto-update in regular usage scenarios. -- DANGEROUS METHODS - Will error if the profile is expired: -- MetaTags - Save and read values stored in Profile.MetaData for storing info about the profile itself like \"Profile:SetMetaTag(\"FirstTimeLoad\", true)\" Profile:SetMetaTag(tag_name, value) Profile:Save() -- Call to quickly progress global update state or to speed up save validation processes (Does not yield) Methods [GlobalUpdates]: -- ALWAYS PUBLIC: GlobalUpdates:GetActiveUpdates() --> [table] {{update_id, update_data}, ...} GlobalUpdates:GetLockedUpdates() --> [table] {{update_id, update_data}, ...} -- ONLY WHEN FROM \"Profile.GlobalUpdates\": GlobalUpdates:ListenToNewActiveUpdate(listener) --> [ScriptConnection] listener(update_id, update_data) GlobalUpdates:ListenToNewLockedUpdate(listener) --> [ScriptConnection] listener(update_id, update_data) -- WARNING: GlobalUpdates:LockUpdate() and GlobalUpdates:ClearLockedUpdate() will error after profile expires GlobalUpdates:LockActiveUpdate(update_id) GlobalUpdates:ClearLockedUpdate(update_id) -- EXPOSED TO \"update_handler\" DURING ProfileStore:GlobalUpdateProfileAsync() CALL GlobalUpdates:AddActiveUpdate(update_data) GlobalUpdates:ChangeActiveUpdate(update_id, update_data) GlobalUpdates:ClearActiveUpdate(update_id)","title":"ProfileService"},{"location":"ProfileService/#profileservice","text":"{Madwork} -ProfileService--------------------------------------- (STANDALONE VERSION) DataStore profiles - universal session-locked savable table API Official documentation: https://madstudioroblox.github.io/ProfileService/ DevForum discussion: https://devforum.roblox.com/t/ProfileService/667805 WARNINGS FOR \"Profile.Data\" VALUES: ! Do not create numeric tables with gaps - attempting to replicate such tables will result in an error; ! Do not create mixed tables (some values indexed by number and others by string key), as only the data indexed by number will be replicated. ! Do not index tables by anything other than numbers and strings. ! Do not reference Roblox Instances ! Do not reference userdata (Vector3, Color3, CFrame...) - Serialize userdata before referencing ! Do not reference functions WARNING: Calling ProfileStore:LoadProfileAsync() with a \"profile_key\" which wasn't released in the SAME SESSION will result in an error! If you want to \"ProfileStore:LoadProfileAsync()\" instead of using the already loaded profile, :Release() the old Profile object. Members: ProfileService.ServiceLocked [bool] ProfileService.IssueSignal [ScriptSignal](error_message, profile_store_name, profile_key) ProfileService.CorruptionSignal [ScriptSignal](profile_store_name, profile_key) ProfileService.CriticalStateSignal [ScriptSignal](is_critical_state) Functions: ProfileService.GetProfileStore(profile_store_name, profile_template) --> [ProfileStore] -- WARNING: Only one ProfileStore can exist for a given profile_store_name in a game session! * Parameter description for \"ProfileService.GetProfileStore()\": profile_store_name [string] -- DataStore name profile_template []: {} [table] -- Profiles will default to given table (hard-copy) when no data was saved previously Members [ProfileStore]: ProfileStore.Mock [ProfileStore] -- Reflection of ProfileStore methods, but the methods will use a mock DataStore Methods [ProfileStore]: ProfileStore:LoadProfileAsync(profile_key, not_released_handler) --> [Profile / nil] not_released_handler(place_id, game_job_id) ProfileStore:GlobalUpdateProfileAsync(profile_key, update_handler) --> [GlobalUpdates / nil] (update_handler(GlobalUpdates)) -- Returns GlobalUpdates object if update was successful, otherwise returns nil ProfileStore:ViewProfileAsync(profile_key) --> [Profile / nil] -- Notice #1: Profile object methods will not be available; Notice #2: Profile object members will be nil (Profile.Data = nil, Profile.MetaData = nil) if the profile hasn't been created, with the exception of Profile.GlobalUpdates which could be empty or populated by ProfileStore:GlobalUpdateProfileAsync() ProfileStore:WipeProfileAsync(profile_key) --> is_wipe_successful [bool] -- Completely wipes out profile data from the DataStore / mock DataStore with no way to recover it. * Parameter description for \"ProfileStore:LoadProfileAsync()\": profile_key [string] -- DataStore key not_released_handler = \"ForceLoad\" -- Force loads profile on first call OR not_released_handler = \"Steal\" -- Steals the profile ignoring it's session lock OR not_released_handler [function] (place_id, game_job_id) --> [string] (\"Repeat\" / \"Cancel\" / \"ForceLoad\") -- \"not_released_handler\" will be triggered in cases where the profile is not released by a session. This function may yield for as long as desirable and must return one of three string values: [\"Repeat\"] - ProfileService will repeat the profile loading proccess and may trigger the release handler again [\"Cancel\"] - ProfileStore:LoadProfileAsync() will immediately return nil [\"ForceLoad\"] - ProfileService will repeat the profile loading call, but will return Profile object afterwards and release the profile for another session that has loaded the profile [\"Steal\"] - The profile will usually be loaded immediately, ignoring an existing remote session lock and applying a session lock for this session. * Parameter description for \"ProfileStore:GlobalUpdateProfileAsync()\": profile_key [string] -- DataStore key update_handler [function] (GlobalUpdates) -- This function gains access to GlobalUpdates object methods (update_handler can't yield) Members [Profile]: Profile.Data [table] -- Writable table that gets saved automatically and once the profile is released Profile.MetaData [table] (Read-only) -- Information about this profile Profile.MetaData.ProfileCreateTime [number] (Read-only) -- os.time() timestamp of profile creation Profile.MetaData.SessionLoadCount [number] (Read-only) -- Amount of times the profile was loaded Profile.MetaData.ActiveSession [table] (Read-only) {place_id, game_job_id} / nil -- Set to a session link if a game session is currently having this profile loaded; nil if released Profile.MetaData.MetaTags [table] {[\"tag_name\"] = tag_value, ...} -- Saved and auto-saved just like Profile.Data Profile.MetaData.MetaTagsLatest [table] (Read-only) -- Latest version of MetaData.MetaTags that was definetly saved to DataStore (You can use Profile.MetaData.MetaTagsLatest for product purchase save confirmation, but create a system to clear old tags after they pile up) Profile.GlobalUpdates [GlobalUpdates] Methods [Profile]: -- SAFE METHODS - Will not error after profile expires: Profile:IsActive() --> [bool] -- Returns true while the profile is active and can be written to Profile:GetMetaTag(tag_name) --> value Profile:Reconcile() -- Fills in missing (nil) [string_key] = [value] pairs to the Profile.Data structure Profile:ListenToRelease(listener) --> [ScriptConnection] (place_id / nil, game_job_id / nil) -- WARNING: Profiles can be released externally if another session force-loads this profile - use :ListenToRelease() to handle player leaving cleanup. Profile:Release() -- Call after the session has finished working with this profile e.g., after the player leaves (Profile object will become expired) (Does not yield) Profile:ListenToHopReady(listener) --> [ScriptConnection] () -- Passed listener will be executed after the releasing UpdateAsync call finishes; -- Wrap universe teleport requests with this method AFTER releasing the profile to improve session lock sharing between universe places; -- :ListenToHopReady() will usually call the listener in around a second, but may ocassionally take up to 7 seconds when a release happens -- next to an auto-update in regular usage scenarios. -- DANGEROUS METHODS - Will error if the profile is expired: -- MetaTags - Save and read values stored in Profile.MetaData for storing info about the profile itself like \"Profile:SetMetaTag(\"FirstTimeLoad\", true)\" Profile:SetMetaTag(tag_name, value) Profile:Save() -- Call to quickly progress global update state or to speed up save validation processes (Does not yield) Methods [GlobalUpdates]: -- ALWAYS PUBLIC: GlobalUpdates:GetActiveUpdates() --> [table] {{update_id, update_data}, ...} GlobalUpdates:GetLockedUpdates() --> [table] {{update_id, update_data}, ...} -- ONLY WHEN FROM \"Profile.GlobalUpdates\": GlobalUpdates:ListenToNewActiveUpdate(listener) --> [ScriptConnection] listener(update_id, update_data) GlobalUpdates:ListenToNewLockedUpdate(listener) --> [ScriptConnection] listener(update_id, update_data) -- WARNING: GlobalUpdates:LockUpdate() and GlobalUpdates:ClearLockedUpdate() will error after profile expires GlobalUpdates:LockActiveUpdate(update_id) GlobalUpdates:ClearLockedUpdate(update_id) -- EXPOSED TO \"update_handler\" DURING ProfileStore:GlobalUpdateProfileAsync() CALL GlobalUpdates:AddActiveUpdate(update_data) GlobalUpdates:ChangeActiveUpdate(update_id, update_data) GlobalUpdates:ClearActiveUpdate(update_id)","title":"ProfileService"},{"location":"RagdollBrickComponent/","text":"RagdollBrickComponent Documentation Not Found","title":"RagdollBrickComponent"},{"location":"RagdollBrickComponent/#ragdollbrickcomponent","text":"Documentation Not Found","title":"RagdollBrickComponent"},{"location":"RagdollComponent/","text":"RagdollComponent Ragdoll Component by Astro and Tomgie Ragdoll the tagged character and un-ragdoll when the tag is removed via Janitor. How to use: Assign \"Ragdoll\" tag to the character model. Unassign the tag to return the character to its normal state.","title":"RagdollComponent"},{"location":"RagdollComponent/#ragdollcomponent","text":"Ragdoll Component by Astro and Tomgie Ragdoll the tagged character and un-ragdoll when the tag is removed via Janitor. How to use: Assign \"Ragdoll\" tag to the character model. Unassign the tag to return the character to its normal state.","title":"RagdollComponent"},{"location":"RagdollConstants/","text":"RagdollComponent This is a collection of constants that describe the ragdoll. JOINT_PROPERTIES: The properties of each joint in the ragdoll. COLLISION_FILTERS: The ragdoll cannot properly fall if its limbs are colliding. This describes the NoCollisionConstraints to create so that the limbs do not collide with each other. PART_TO_JOINT_MAP: A map between the names of the parts and the names of their respective joints.","title":"RagdollConstants"},{"location":"RagdollConstants/#ragdollcomponent","text":"This is a collection of constants that describe the ragdoll. JOINT_PROPERTIES: The properties of each joint in the ragdoll. COLLISION_FILTERS: The ragdoll cannot properly fall if its limbs are colliding. This describes the NoCollisionConstraints to create so that the limbs do not collide with each other. PART_TO_JOINT_MAP: A map between the names of the parts and the names of their respective joints.","title":"RagdollComponent"},{"location":"TimeUtils/","text":"TimeUtils Documentation Not Found","title":"TimeUtils"},{"location":"TimeUtils/#timeutils","text":"Documentation Not Found","title":"TimeUtils"},{"location":"UnragdollBrickComponent/","text":"UnragdollBrickComponent Documentation Not Found","title":"UnragdollBrickComponent"},{"location":"UnragdollBrickComponent/#unragdollbrickcomponent","text":"Documentation Not Found","title":"UnragdollBrickComponent"},{"location":"blank/","text":"Blank Etiam sit amet massa magna. Aenean vehicula orci ut feugiat suscipit. Vestibulum hendrerit congue leo sed blandit. Vivamus eget placerat est, quis vulputate nisl. Duis finibus velit urna, a pellentesque ligula posuere non. Suspendisse non luctus leo. Mauris ut massa magna. Sed posuere tincidunt ex eget ultrices. In eget interdum elit. Cras tincidunt imperdiet dolor.","title":"UtilExample"},{"location":"blank/#blank","text":"Etiam sit amet massa magna. Aenean vehicula orci ut feugiat suscipit. Vestibulum hendrerit congue leo sed blandit. Vivamus eget placerat est, quis vulputate nisl. Duis finibus velit urna, a pellentesque ligula posuere non. Suspendisse non luctus leo. Mauris ut massa magna. Sed posuere tincidunt ex eget ultrices. In eget interdum elit. Cras tincidunt imperdiet dolor.","title":"Blank"},{"location":"controllers/","text":"Controllers Documentation Not Found","title":"Controllers"},{"location":"controllers/#controllers","text":"Documentation Not Found","title":"Controllers"},{"location":"gamemodes/","text":"GameModes Etiam sit amet massa magna. Aenean vehicula orci ut feugiat suscipit. Vestibulum hendrerit congue leo sed blandit. Vivamus eget placerat est, quis vulputate nisl. Duis finibus velit urna, a pellentesque ligula posuere non. Suspendisse non luctus leo. Mauris ut massa magna. Sed posuere tincidunt ex eget ultrices. In eget interdum elit. Cras tincidunt imperdiet dolor.","title":"GameModes"},{"location":"gamemodes/#gamemodes","text":"Etiam sit amet massa magna. Aenean vehicula orci ut feugiat suscipit. Vestibulum hendrerit congue leo sed blandit. Vivamus eget placerat est, quis vulputate nisl. Duis finibus velit urna, a pellentesque ligula posuere non. Suspendisse non luctus leo. Mauris ut massa magna. Sed posuere tincidunt ex eget ultrices. In eget interdum elit. Cras tincidunt imperdiet dolor.","title":"GameModes"},{"location":"services/","text":"Services Etiam sit amet massa magna. Aenean vehicula orci ut feugiat suscipit. Vestibulum hendrerit congue leo sed blandit. Vivamus eget placerat est, quis vulputate nisl. Duis finibus velit urna, a pellentesque ligula posuere non. Suspendisse non luctus leo. Mauris ut massa magna. Sed posuere tincidunt ex eget ultrices. In eget interdum elit. Cras tincidunt imperdiet dolor.","title":"ServicesExample"},{"location":"services/#services","text":"Etiam sit amet massa magna. Aenean vehicula orci ut feugiat suscipit. Vestibulum hendrerit congue leo sed blandit. Vivamus eget placerat est, quis vulputate nisl. Duis finibus velit urna, a pellentesque ligula posuere non. Suspendisse non luctus leo. Mauris ut massa magna. Sed posuere tincidunt ex eget ultrices. In eget interdum elit. Cras tincidunt imperdiet dolor.","title":"Services"}]}