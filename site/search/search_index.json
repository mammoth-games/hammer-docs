{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Current Developers AstroCode Matasmathew Seakat MC. Kitten Face Tomgie WohoNavy Zeloi Information We are using the Knit framework by sleitnick. Knit API","title":"Home"},{"location":"#current-developers","text":"AstroCode Matasmathew Seakat MC. Kitten Face Tomgie WohoNavy Zeloi","title":"Current Developers"},{"location":"#information","text":"We are using the Knit framework by sleitnick. Knit API","title":"Information"},{"location":"utils/","text":"Utils These are utils that did not come with stock Knit. Janitor External docs Scheduler External docs Enumerator External docs","title":"Utils"},{"location":"utils/#utils","text":"These are utils that did not come with stock Knit.","title":"Utils"},{"location":"utils/#janitor","text":"External docs","title":"Janitor"},{"location":"utils/#scheduler","text":"External docs","title":"Scheduler"},{"location":"utils/#enumerator","text":"External docs","title":"Enumerator"},{"location":"client/components/LobbyCountdownComponent/","text":"LobbyCountdownComponent Documentation Not Found","title":"LobbyCountdownComponent"},{"location":"client/components/LobbyCountdownComponent/#lobbycountdowncomponent","text":"Documentation Not Found","title":"LobbyCountdownComponent"},{"location":"client/controllers/example/","text":"Controller example Documentation Not Found","title":"Example"},{"location":"client/controllers/example/#controller-example","text":"Documentation Not Found","title":"Controller example"},{"location":"client/modules/RaycastHitbox/","text":"RaycastHitbox A point caster must be named \"$Caster.Point\". A segment caster must have two attachments named \"$Caster.Segment.UniqueName.0\" <-- this one is the origin of the raycast \"$Caster.Segment.UniqueName.1\" <-- this one is the tip of the raycast RaycastHitbox.new(object: Instance, whitelistedTags: {string}) object: The Instance with caster attachments as descendants whitelistedTags: The tags which raycasting will whitelist RaycastHitbox:Destroy() RaycastHitbox:Enable() RaycastHitbox:Disable() RaycastHitbox:EnableDebug() RaycastHitbox:DisableDebug() RaycastHitbox.OnHit:Connect(...)","title":"RaycastHitbox"},{"location":"client/modules/RaycastHitbox/#raycasthitbox","text":"A point caster must be named \"$Caster.Point\". A segment caster must have two attachments named \"$Caster.Segment.UniqueName.0\" <-- this one is the origin of the raycast \"$Caster.Segment.UniqueName.1\" <-- this one is the tip of the raycast RaycastHitbox.new(object: Instance, whitelistedTags: {string}) object: The Instance with caster attachments as descendants whitelistedTags: The tags which raycasting will whitelist RaycastHitbox:Destroy() RaycastHitbox:Enable() RaycastHitbox:Disable() RaycastHitbox:EnableDebug() RaycastHitbox:DisableDebug() RaycastHitbox.OnHit:Connect(...)","title":"RaycastHitbox"},{"location":"server/gamemodes/","text":"GameModes Documentation Not Found","title":"Game Modes"},{"location":"server/gamemodes/#gamemodes","text":"Documentation Not Found","title":"GameModes"},{"location":"server/modules/","text":"Server Modules ProfileService External docs TimeUtils Documentation Not Found","title":"Modules"},{"location":"server/modules/#server-modules","text":"","title":"Server Modules"},{"location":"server/modules/#profileservice","text":"External docs","title":"ProfileService"},{"location":"server/modules/#timeutils","text":"Documentation Not Found","title":"TimeUtils"},{"location":"server/components/BubbleComponent/","text":"BubbleComponent Documentation Not Found","title":"BubbleComponent"},{"location":"server/components/BubbleComponent/#bubblecomponent","text":"Documentation Not Found","title":"BubbleComponent"},{"location":"server/components/HillComponent/","text":"HillComponent HillComponent Replaces the forcefield hills with a rotating beam circle. The math: https://www.desmos.com/calculator/xrpslugw6x","title":"HillComponent"},{"location":"server/components/HillComponent/#hillcomponent","text":"HillComponent Replaces the forcefield hills with a rotating beam circle. The math: https://www.desmos.com/calculator/xrpslugw6x","title":"HillComponent"},{"location":"server/components/KillBrickComponent/","text":"LobbyCountdown Documentation Not Found","title":"KillBrickComponent"},{"location":"server/components/KillBrickComponent/#lobbycountdown","text":"Documentation Not Found","title":"LobbyCountdown"},{"location":"server/components/LeaderboardComponent/","text":"LeaderboardComponent Documentation Not Found","title":"LeaderboardComponent"},{"location":"server/components/LeaderboardComponent/#leaderboardcomponent","text":"Documentation Not Found","title":"LeaderboardComponent"},{"location":"server/components/RagdollBrickComponent/","text":"RagdollBrickComponent Documentation Not Found","title":"RagdollBrickComponent"},{"location":"server/components/RagdollBrickComponent/#ragdollbrickcomponent","text":"Documentation Not Found","title":"RagdollBrickComponent"},{"location":"server/components/RagdollComponent/","text":"RagdollComponent RagdollComponent Ragdoll Component by Astro and Tomgie Ragdoll the tagged character and un-ragdoll when the tag is removed via Janitor. How to use: Assign \"Ragdoll\" tag to the character model. Unassign the tag to return the character to its normal state. RagdollConstants This is a collection of constants that describe the ragdoll. JOINT_PROPERTIES: The properties of each joint in the ragdoll. COLLISION_FILTERS: The ragdoll cannot properly fall if its limbs are colliding. This describes the NoCollisionConstraints to create so that the limbs do not collide with each other. PART_TO_JOINT_MAP: A map between the names of the parts and the names of their respective joints. BuildConstraintsRig This module builds the ragdoll. It returns a dictionary of joints and a dictionary of NoCollisionConstraints. The joint dictionary is structured like this: { Head = { Attachment0 = [Attachment object], Attachment1 = [Attachment object], Constraint = [BallSocketConstraint object], Motor = [Motor6D object], Offset = [CFrame of Attachment0 offset from Motor.C0] }, LeftArm = {...}, RightArm = {...}, LeftLeg = {...}, RightLeg = {...}, } The NoCollisionConstraints dictionary is structured like this: { Arms = { [NoCollisionConstraint], [NoCollisionConstraint], ... }, Legs = {...}, Hips = {...} } Each index in the NoCollisionConstraints dictionary has the minimum amount of NoCollisionConstraint objects required to connect all of the parts in each index of Constants.ANIMATE_COLLISION_FILTERS to every other part in the index.","title":"RagdollComponent"},{"location":"server/components/RagdollComponent/#ragdollcomponent","text":"","title":"RagdollComponent"},{"location":"server/components/RagdollComponent/#ragdollcomponent_1","text":"Ragdoll Component by Astro and Tomgie Ragdoll the tagged character and un-ragdoll when the tag is removed via Janitor. How to use: Assign \"Ragdoll\" tag to the character model. Unassign the tag to return the character to its normal state.","title":"RagdollComponent"},{"location":"server/components/RagdollComponent/#ragdollconstants","text":"This is a collection of constants that describe the ragdoll. JOINT_PROPERTIES: The properties of each joint in the ragdoll. COLLISION_FILTERS: The ragdoll cannot properly fall if its limbs are colliding. This describes the NoCollisionConstraints to create so that the limbs do not collide with each other. PART_TO_JOINT_MAP: A map between the names of the parts and the names of their respective joints.","title":"RagdollConstants"},{"location":"server/components/RagdollComponent/#buildconstraintsrig","text":"This module builds the ragdoll. It returns a dictionary of joints and a dictionary of NoCollisionConstraints. The joint dictionary is structured like this: { Head = { Attachment0 = [Attachment object], Attachment1 = [Attachment object], Constraint = [BallSocketConstraint object], Motor = [Motor6D object], Offset = [CFrame of Attachment0 offset from Motor.C0] }, LeftArm = {...}, RightArm = {...}, LeftLeg = {...}, RightLeg = {...}, } The NoCollisionConstraints dictionary is structured like this: { Arms = { [NoCollisionConstraint], [NoCollisionConstraint], ... }, Legs = {...}, Hips = {...} } Each index in the NoCollisionConstraints dictionary has the minimum amount of NoCollisionConstraint objects required to connect all of the parts in each index of Constants.ANIMATE_COLLISION_FILTERS to every other part in the index.","title":"BuildConstraintsRig"},{"location":"server/components/UnragdollBrickComponent/","text":"UnragdollBrickComponent Documentation Not Found","title":"UnragdollBrickComponent"},{"location":"server/components/UnragdollBrickComponent/#unragdollbrickcomponent","text":"Documentation Not Found","title":"UnragdollBrickComponent"},{"location":"server/services/characters/DeathService/","text":"DeathService Ragdolls a character when it dies, but not when its RootPart is below workspace.FallenPartsDestroyHeight.","title":"DeathService"},{"location":"server/services/characters/DeathService/#deathservice","text":"Ragdolls a character when it dies, but not when its RootPart is below workspace.FallenPartsDestroyHeight.","title":"DeathService"},{"location":"server/services/characters/RagdollService/","text":"RagdollService Applies and resets player ragdolls. This is done by adding/removing the \"Ragdoll\" tag from a character. The Ragdoll component handles the actual ragdolling implementation. Clients can also tell RagdollService to reset their ragdoll by calling Client:GetUp(). :ApplyRagdoll(character) Adds the \"Ragdoll\" tag to the character and fires the Client.IsRagdolledChanged remote. :RemoveRagdoll(character) Removes the \"Ragdoll\" tag from the character and fires the Client.IsRagdolledChanged remote. Client:GetUp(player: Player) Called by clients. Removes their ragdoll.","title":"RagdollService"},{"location":"server/services/characters/RagdollService/#ragdollservice","text":"Applies and resets player ragdolls. This is done by adding/removing the \"Ragdoll\" tag from a character. The Ragdoll component handles the actual ragdolling implementation. Clients can also tell RagdollService to reset their ragdoll by calling Client:GetUp(). :ApplyRagdoll(character) Adds the \"Ragdoll\" tag to the character and fires the Client.IsRagdolledChanged remote. :RemoveRagdoll(character) Removes the \"Ragdoll\" tag from the character and fires the Client.IsRagdolledChanged remote. Client:GetUp(player: Player) Called by clients. Removes their ragdoll.","title":"RagdollService"},{"location":"server/services/data/PlayerCharacterService/","text":"PlayerCharacterService API :RegisterVariable(name: string, value: any) :RegisterCallback(variableName: string, callback: function) :GetPlayerList() :GetHumanoidList() :GetRootPartList() :GetRootPartFromUserId(userId: number) :GetHumanoidFromUserId(userId: number) :GetCharacterFromUserId(userId: number) :GetPlayerData(player: Player) :GetPlayerDataFromUserId(userId: number) :GetPlayerDataFromCharacter(character: model)","title":"PlayerCharacterService"},{"location":"server/services/data/PlayerCharacterService/#playercharacterservice","text":"API :RegisterVariable(name: string, value: any) :RegisterCallback(variableName: string, callback: function) :GetPlayerList() :GetHumanoidList() :GetRootPartList() :GetRootPartFromUserId(userId: number) :GetHumanoidFromUserId(userId: number) :GetCharacterFromUserId(userId: number) :GetPlayerData(player: Player) :GetPlayerDataFromUserId(userId: number) :GetPlayerDataFromCharacter(character: model)","title":"PlayerCharacterService"},{"location":"server/services/data/ProfileService/","text":"PlayerCharacterService Makes player data accessible for other scripts Ex. local profile = ProfileService:GetProfile(userid) profile:AddCurrency(\"Gold\", 5) profile:GetCurrencyOfType(\"Gold\") API: ProfileService:GetProfile(userId: number) ProfileService:GetProfiles() ProfileService:UpdateTopPlayer() Profile:GetCurrencyOfType(name: string) Profile:GetAllCurrency() Profile:AddCurrencyOfType(name: string, amount: number) Profile:SubtractCurrencyOfType(name: string, amount: number) Profile:GetCosmeticsOfType(cosmeticType: string)","title":"ProfileService"},{"location":"server/services/data/ProfileService/#playercharacterservice","text":"Makes player data accessible for other scripts Ex. local profile = ProfileService:GetProfile(userid) profile:AddCurrency(\"Gold\", 5) profile:GetCurrencyOfType(\"Gold\") API: ProfileService:GetProfile(userId: number) ProfileService:GetProfiles() ProfileService:UpdateTopPlayer() Profile:GetCurrencyOfType(name: string) Profile:GetAllCurrency() Profile:AddCurrencyOfType(name: string, amount: number) Profile:SubtractCurrencyOfType(name: string, amount: number) Profile:GetCosmeticsOfType(cosmeticType: string)","title":"PlayerCharacterService"},{"location":"server/services/gameplay/GameLoopService/","text":"GameLoopService Runs an infinite gameloop. API: GameLoopService:GetPointGoal() Returns how many points are needed to win the current gamemode","title":"GameLoopService"},{"location":"server/services/gameplay/GameLoopService/#gameloopservice","text":"Runs an infinite gameloop. API: GameLoopService:GetPointGoal() Returns how many points are needed to win the current gamemode","title":"GameLoopService"},{"location":"server/services/gameplay/LobbyService/","text":"LobbyService For manipulating the lobby.","title":"LobbyService"},{"location":"server/services/gameplay/LobbyService/#lobbyservice","text":"For manipulating the lobby.","title":"LobbyService"},{"location":"server/services/gameplay/MapService/","text":"MapService API: :LoadMap(gameModeName: string, mapName: string) Yielding method. Loads the terrain/parts for a given map. :UnloadMap() Clears all terrain and removes all children from Map folder. :GetRandomGameModeMap(gameModeName: string) :GetGameModeMaps(gameModeName: string) :GetMapContainer()","title":"MapService"},{"location":"server/services/gameplay/MapService/#mapservice","text":"API: :LoadMap(gameModeName: string, mapName: string) Yielding method. Loads the terrain/parts for a given map. :UnloadMap() Clears all terrain and removes all children from Map folder. :GetRandomGameModeMap(gameModeName: string) :GetGameModeMaps(gameModeName: string) :GetMapContainer()","title":"MapService"},{"location":"server/services/general/ClockService/","text":"ClockService Create timers that count down from a specified time or stopwatches that count up from 0. Timers use Signals to be able to fire functions when they complete. Ex. local timer = ClockService:newTimer(10) timer.Completed:Connect(function() end) timer.Completed:Wait() API: ClockService:newTimer(duration: number?, name: string?) ClockService:newStopwatch(name: string?) ClockService:GetTimer(name: string) ClockService:GetStopwatch(name: string) Timer:GetTime() Timer:Destroy() Stopwatch:GetTime() Stopwatch:Benchmark() Stopwatch:Destroy()","title":"ClockService"},{"location":"server/services/general/ClockService/#clockservice","text":"Create timers that count down from a specified time or stopwatches that count up from 0. Timers use Signals to be able to fire functions when they complete. Ex. local timer = ClockService:newTimer(10) timer.Completed:Connect(function() end) timer.Completed:Wait() API: ClockService:newTimer(duration: number?, name: string?) ClockService:newStopwatch(name: string?) ClockService:GetTimer(name: string) ClockService:GetStopwatch(name: string) Timer:GetTime() Timer:Destroy() Stopwatch:GetTime() Stopwatch:Benchmark() Stopwatch:Destroy()","title":"ClockService"},{"location":"server/services/hammers/HammerService/","text":"HitService Documentation Not Found","title":"HammerService"},{"location":"server/services/hammers/HammerService/#hitservice","text":"Documentation Not Found","title":"HitService"},{"location":"server/services/hammers/HitService/","text":"HammerService Documentation Not Found","title":"HitService"},{"location":"server/services/hammers/HitService/#hammerservice","text":"Documentation Not Found","title":"HammerService"}]}